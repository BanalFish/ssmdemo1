<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd ">

    <!--配置IOC，di注解解析器 -->
    <context:component-scan base-package="cn.mycode.ssm.controller"/>
    <!--配置mvc注解解析器 -->
    <mvc:annotation-driven/>
    <mvc:default-servlet-handler/>



    <!--关联db.properties-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--关联数据库连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--关联工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--引入数据源 配置别名-->
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="cn.mycode.ssm.domain"/>
    </bean>

<!--    配置的是接口对象-->
<!--    <bean id="accountMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
<!--        &lt;!&ndash;固定的配置&ndash;&gt;-->
<!--        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>-->
<!--        &lt;!&ndash;这个name是固定的，值是项目的mapper路径&ndash;&gt;-->
<!--        <property name="mapperInterface" value="cn.mycode.ssm.mapper.AccountMapper"/>-->

<!--    </bean>-->

<!--    <bean id="accountService" class="cn.mycode.ssm.service.impl.AccountServiceImpl">-->
<!--        <property name="accountMapper" ref="accountMapper"/>-->
<!--    </bean>-->


<!--    批量生成mapper对象，上面的只能生成一个。value值是mapper所在包-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.mycode.ssm.mapper"/>
    </bean>

    <!--配置扫描器保证注解起作用。所在包是service-->
    <context:component-scan base-package="cn.mycode.ssm.service.impl"/>

    <!--配置事务管理 -->

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--what
        上面是配置事务管理器，之前都是自己写
         下面是配置事务源，要想提交事务到数据库，必须要连接数据库
         于是就用上面写好的-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--使用注解解析器来配置AOP -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!--where
     增强=where+what
     所以后面配了上面的事务管理器
     属性里面是所有方法-->
<!--    <tx:advice id="txAdvice" transaction-manager="transactionManager">-->
<!--        <tx:attributes>-->
<!--            <tx:method name="*"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->

<!--    <aop:config>-->
<!--        <aop:pointcut id="txPointCut" expression="execution(* cn.mycode.ssm.service.impl.*ServiceImpl.*(..))"/>-->
<!--        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>-->
<!--    </aop:config>-->
    <aop:aspectj-autoproxy  proxy-target-class="true"/>

</beans>
